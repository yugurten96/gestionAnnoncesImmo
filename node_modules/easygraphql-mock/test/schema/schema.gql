scalar DateTime

enum FamilyRelation {
  Father
  Mother
  Brother
}

type Family {
  name: String!
  ages: [Int]!
  user: User!
  familyRelation: FamilyRelation!
  familyRelationArr: [FamilyRelation]!
}

type Me {
  id: ID!
  email: String
  username: [String]!
  fullName: String!
  result: Float
  phone: [Int]!
  apiKey: String!
  users: [User]!
  verified: Boolean!
  createdAt: DateTime!
}

type User {
  me: Me!
  email: String!
  username: String!
  fullName: String!
  phone: String!
  family: Family!
}

# MUTATIONS

# Create a new User
input UserInput {
  email: String!
  username: String!
  fullName: String!
  password: String!
}
# Login
input LoginInput {
  email: String!
  password: String!
}
# Update password
input UpdatePasswordInput {
  oldPassword: String!
  newPassword: String!
}

type Query {
  getMe: Me
  getUserByUsername(username: String!, id: Int!): User
}

type Mutation {
  createUser(input: UserInput!): Me
  login(input: LoginInput!): Me
  updatePassword(input: UpdatePasswordInput!): Me
}

schema {
  query: Query
  mutation: Mutation
}
