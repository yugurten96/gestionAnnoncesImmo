### This file was autogenerated by Nexus 0.11.6
### Do not make changes to this file directly

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the
`date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO
8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

input DetachProjectIntegrationInput {
  """
  The slug of the project we want to detach a project from
  """
  projectSlug: String!
}

"""
The GithubAppInstall represents a 1:1 mapping of a User/Org and
the Cypress Application. This is mainly for internal use.
"""
type GithubAppInstall {
  """
  The avatar of the account
  """
  accountAvatarUrl: String!

  """
  Username of the account/org this install is associated with
  """
  accountLogin: String!

  """
  The type of the owner of the repo, User / Organization
  """
  accountType: GithubAppRepoOwnerTypeEnum!

  """
  The ID of the GitHub Application (e.g. cypress, cypress-dev)
  """
  id: Int!

  """
  Whether Cypress is actively synchronizing its local cache with GitHub
  """
  isSyncing: Boolean!

  """
  The list of repositories that are made available to the App
  """
  repos(input: GithubAppInstallReposInput): GithubAppRepositoryConnection!
}

input GithubAppInstallReposInput {
  """
  Limits the result of the repos input
  """
  limit: Int
}

"""
Representation of a GitHub organization. Specifically prefixed with "GithubApp"
to indicate that we only intend to use/sync this with the App metadata
and not use it as part of a larger authorization story for now.
"""
type GithubAppOrganization implements GithubAppRepositoryOwner {
  avatarUrl: String!
  htmlUrl: String!
  id: ID!
  login: String!
  type: GithubAppRepoOwnerTypeEnum!
}

enum GithubAppRepoOwnerTypeEnum {
  ORGANIZATION
  USER
}

type GithubAppRepository {
  fullName: String!
  htmlUrl: String!
  id: ID!
  isPrivate: Boolean!
  name: String!
  owner: GithubAppRepositoryOwner!
}

type GithubAppRepositoryConnection {
  """
  Paginated results for the GithubAppRepository type
  """
  nodes: [GithubAppRepository!]!

  """
  Total count of GithubAppRepository rows
  """
  totalCount: Int!
}

"""
Represents the owner of a repository, can be either a "GithubAppUser"
or a "GithubAppOrganization".
"""
interface GithubAppRepositoryOwner {
  avatarUrl: String!
  htmlUrl: String!
  id: ID!
  login: String!
  type: GithubAppRepoOwnerTypeEnum!
}

"""
Representation of a GitHub user. Specifically prefixed with "GithubApp"
to indicate that we only intend to use/sync this with the App metadata
and not use it as part of a larger authorization story for now.
"""
type GithubAppUser implements GithubAppRepositoryOwner {
  avatarUrl: String!
  htmlUrl: String!
  id: ID!
  login: String!
  type: GithubAppRepoOwnerTypeEnum!
}

type GithubCommitStatusChecksSample {
  description: String!
  name: String!
  status: String!
}

type GithubCommitStatusChecksSamples {
  samples: GithubCommitStatusChecksSample!
  total: Int!
}

enum GithubCommitStatusCheckStatusEnum {
  FAILURE
  SUCCESS
}

"""
The granularity of commit status checks that Cypress sends to GitHub
"""
enum GithubCommitStatusCheckStyleEnum {
  GROUP
  RUN
  SPEC
}

type GithubRepositorySearchResult {
  repo: GithubAppRepository!
  suggested: Boolean!
}

input GithubRepositorySearchResultInput {
  """
  Which page of results we want to return, default: 1
  """
  page: Int = 1

  """
  How many results we want to return, default: 30
  """
  perPage: Int = 30

  """
  If provided, this field searches for repositories that match the string
  """
  search: String!
}

type GithubRepositorySearchResultResourceResponse {
  ok: Boolean!
  query: Query!
  resource: GithubRepositorySearchResult!
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

"""
The role a user has for an organization
"""
enum MembershipRole {
  ADMIN
  MEMBER
  OWNER
}

type Mutation {
  """
  Disconnects the association between a GitHub integration and a Cypress Project
  """
  detachProjectGithubIntegration(
    input: DetachProjectIntegrationInput!
  ): ProjectResourceResponse!

  """
  Creates / updates the association between a GitHub integration and a Cypress Project.
  """
  setProjectGithubIntegration(
    input: SetProjectGithubIntegrationInput!
  ): ProjectResourceResponse!

  """
  Refreshes the associated GitHub repositories for the application
  """
  syncGithubApps: Boolean!

  """
  Refreshes the associated GitHub repositories for a GitHub integration
  """
  syncGithubInstallation(
    """
    The id of the Github installation
    """
    installationId: Int!
  ): GithubAppInstall!
}

"""
A "Organization" represents a collection of projects in the Cypress Application.
An organization has one or more associated projects, and can have zero or more connected
"Github App Installations".
"""
type Organization {
  githubAppInstallations: [GithubAppInstall!]!
  id: String!
  name: String!
  projects(role: [MembershipRole!]): ProjectConnection!
}

type OrganizationConnection {
  """
  Paginated results for the Organization type
  """
  nodes: [Organization!]!

  """
  Total count of Organization rows
  """
  totalCount: Int!
}

input OrganizationGithubAppReposInput {
  """
  Which page of results we want to return, default: 1
  """
  page: Int = 1

  """
  How many results we want to return, default: 30
  """
  perPage: Int = 30

  """
  If provided, this field searches for repositories that match the string
  """
  search: String
}

type OrganizationResourceResponse {
  ok: Boolean!
  query: Query!
  resource: Organization!
}

type Project {
  commitStatusChecksSamples(
    input: GithubCommitStatusCheckStyleEnum!
  ): [GithubCommitStatusChecksSamples!]!

  """
  The GithubIntegration for this repository. The same GitHub repository may be
  connected to from multiple cypress projects (e.g. in a mono-repo setup), however this
  is not true the other way around, each cypress project may only be attached
  to a single repository.
  """
  githubIntegration: ProjectGithubIntegration
  id: String!
  name: String!

  """
  The organization which owns this project
  """
  organization: Organization!

  """
  Search for repos
  """
  searchGithubRepos(
    input: GithubRepositorySearchResultInput!
  ): [GithubRepositorySearchResult!]!
}

type ProjectConnection {
  """
  Paginated results for the Project type
  """
  nodes: [Project!]!

  """
  Total count of Project rows
  """
  totalCount: Int!
}

type ProjectGithubIntegration {
  """
  Whether we have configured status checks for this repository
  """
  commitStatusChecksEnabled: Boolean!
  commitStatusCheckStyle: GithubCommitStatusCheckStyleEnum!

  """
  An ID representing the GitHub integration
  """
  id: Int!

  """
  The Cypress project we are integrating
  """
  project: Project!

  """
  Whether Cypress should public a comment to Pull Requests with detailed run information
  """
  pullRequestCommentsEnabled: Boolean!

  """
  Whether Cypress should include screenshots in Pull Request comments
  """
  pullRequestIncludeScreenshots: Boolean!

  """
  The Github Repository associated with this integration
  """
  repository: GithubAppRepository!
}

type ProjectResourceResponse {
  ok: Boolean!
  query: Query!
  resource: Project!
}

type Query {
  me: User
  organization(
    """
    UUID of the organization
    """
    uuid: UUID!
  ): Organization!
  organizations(role: [MembershipRole!]): OrganizationConnection!
  project(
    """
    ID of the project
    """
    id: String!
  ): Project!

  """
  Used to check the behavior of internal error formatting
  """
  testApolloError: Boolean!

  """
  Used to check the behavior of error formatting
  """
  testInternalError: Boolean!
}

"""
Inputs needed for creating/updating an association for a repository with a project
"""
input SetProjectGithubIntegrationInput {
  commitStatusChecksEnabled: Boolean
  commitStatusCheckStyle: GithubCommitStatusCheckStyleEnum

  """
  The repository id we want to associate with this project
  """
  githubRepoId: String!
  projectSlug: String!
  pullRequestCommentsEnabled: Boolean
  pullRequestIncludeScreenshots: Boolean
}

type User {
  githubToken: String
  id: String!
  name: String!
  organizations: OrganizationConnection!
}

type UserResourceResponse {
  ok: Boolean!
  query: Query!
  resource: User!
}

"""
The `UUID` scalar type represents UUID values as specified by [RFC 4122](https://tools.ietf.org/html/rfc4122).
"""
scalar UUID
